presubmits:
  kubernetes/kubernetes:
  - name: pull-kubernetes-e2e-ec2
    skip_branches:
      - release-\d+\.\d+  # per-release image
    annotations:
      testgrid-alert-stale-results-hours: "24"
      testgrid-create-test-group: "true"
      testgrid-num-failures-to-alert: "10"
      testgrid-dashboards: presubmits-ec2
      description: Runs presubmit tests using kubetest2-ec2 against kubernetes master on EC2 (equivalent of pull-kubernetes-e2e-gce)
    labels:
      preset-e2e-containerd-ec2: "true"
      preset-dind-enabled: "true"
    path_alias: k8s.io/kubernetes
    always_run: true
    optional: true
    skip_report: true
    cluster: eks-prow-build-cluster
    decorate: true
    decoration_config:
      timeout: 4h
    extra_refs:
      - org: kubernetes-sigs
        repo: provider-aws-test-infra
        base_ref: main
        path_alias: sigs.k8s.io/provider-aws-test-infra
    spec:
      serviceAccountName: node-e2e-tests
      containers:
        - image: gcr.io/k8s-staging-test-infra/kubekins-e2e:v20231122-5f461e0995-master
          command:
            - runner.sh
          args:
            - bash
            - -c
            - |
              GOPROXY=direct go install sigs.k8s.io/provider-aws-test-infra/kubetest2-ec2@latest
              kubetest2 ec2 \
               --build \
               --region us-east-1 \
               --target-build-arch linux/amd64 \
               --stage provider-aws-test-infra \
               --up \
               --down \
               --test=ginkgo \
               -- \
               --use-built-binaries true \
               --parallel=30 \
               --skip-regex='\[Driver:.gcepd\]|\[Slow\]|\[Serial\]|\[Disruptive\]|\[Flaky\]|\[Feature:.+\]'
          env:
            - name: USE_DOCKERIZED_BUILD
              value: "true"
          # docker-in-docker needs privileged mode
          securityContext:
            privileged: true
          resources:
            limits:
              cpu: 8
              memory: 10Gi
            requests:
              cpu: 8
              memory: 10Gi
  - name: pull-kubernetes-e2e-ec2-arm64
    skip_branches:
      - release-\d+\.\d+  # per-release image
    annotations:
      testgrid-alert-stale-results-hours: "24"
      testgrid-create-test-group: "true"
      testgrid-num-failures-to-alert: "10"
      testgrid-dashboards: presubmits-ec2
      description: Runs presubmit tests using kubetest2-ec2 against kubernetes master on EC2(arm64)
    labels:
      preset-e2e-containerd-ec2: "true"
      preset-dind-enabled: "true"
    path_alias: k8s.io/kubernetes
    always_run: false
    optional: true
    cluster: eks-prow-build-cluster
    decorate: true
    decoration_config:
      timeout: 4h
    extra_refs:
      - org: kubernetes-sigs
        repo: provider-aws-test-infra
        base_ref: main
        path_alias: sigs.k8s.io/provider-aws-test-infra
    spec:
      serviceAccountName: node-e2e-tests
      containers:
        - image: gcr.io/k8s-staging-test-infra/kubekins-e2e:v20231122-5f461e0995-master
          command:
            - runner.sh
          args:
            - bash
            - -c
            - |
              GOPROXY=direct go install sigs.k8s.io/provider-aws-test-infra/kubetest2-ec2@latest
              kubetest2 ec2 \
               --build \
               --region us-east-1 \
               --target-build-arch linux/arm64 \
               --stage provider-aws-test-infra \
               --up \
               --down \
               --test=ginkgo \
               -- \
               --use-built-binaries true \
               --parallel=30 \
               --test-args='--node-os-arch=arm64' \
               --skip-regex='\[Driver:.gcepd\]|\[Slow\]|\[Serial\]|\[Disruptive\]|\[Flaky\]|\[Feature:.+\]'
          env:
            - name: USE_DOCKERIZED_BUILD
              value: "true"
          # docker-in-docker needs privileged mode
          securityContext:
            privileged: true
          resources:
            limits:
              cpu: 8
              memory: 10Gi
            requests:
              cpu: 8
              memory: 10Gi
  - name: pull-kubernetes-e2e-ec2-conformance
    skip_branches:
      - release-\d+\.\d+  # per-release image
    annotations:
      testgrid-alert-stale-results-hours: "24"
      testgrid-create-test-group: "true"
      testgrid-num-failures-to-alert: "10"
      testgrid-dashboards: presubmits-ec2
    labels:
      preset-e2e-containerd-ec2: "true"
      preset-dind-enabled: "true"
    path_alias: k8s.io/kubernetes
    always_run: true
    optional: true
    skip_report: true
    cluster: eks-prow-build-cluster
    decorate: true
    decoration_config:
      timeout: 4h
    extra_refs:
      - org: kubernetes-sigs
        repo: provider-aws-test-infra
        base_ref: main
        path_alias: sigs.k8s.io/provider-aws-test-infra
    spec:
      serviceAccountName: node-e2e-tests
      containers:
        - image: gcr.io/k8s-staging-test-infra/kubekins-e2e:v20231122-5f461e0995-master
          command:
            - runner.sh
          args:
            - bash
            - -c
            - |
              GOPROXY=direct go install sigs.k8s.io/provider-aws-test-infra/kubetest2-ec2@latest
              kubetest2 ec2 \
               --build \
               --instance-type=m6a.large  \
               --region us-east-1 \
               --target-build-arch linux/amd64 \
               --stage provider-aws-test-infra \
               --up \
               --down \
               --test=ginkgo \
               -- \
               --use-built-binaries true \
               --focus-regex='\[Conformance\]'
          env:
            - name: USE_DOCKERIZED_BUILD
              value: "true"
          # docker-in-docker needs privileged mode
          securityContext:
            privileged: true
          resources:
            limits:
              cpu: 8
              memory: 10Gi
            requests:
              cpu: 8
              memory: 10Gi
  - name: pull-kubernetes-e2e-ec2-conformance-arm64
    skip_branches:
      - release-\d+\.\d+  # per-release image
    annotations:
      testgrid-alert-stale-results-hours: "24"
      testgrid-create-test-group: "true"
      testgrid-num-failures-to-alert: "10"
      testgrid-dashboards: presubmits-ec2
      description: Runs presubmit conformance tests using kubetest2-ec2 against kubernetes master on EC2(arm64)
    labels:
      preset-e2e-containerd-ec2: "true"
      preset-dind-enabled: "true"
    path_alias: k8s.io/kubernetes
    always_run: false
    optional: true
    cluster: eks-prow-build-cluster
    decorate: true
    decoration_config:
      timeout: 4h
    extra_refs:
      - org: kubernetes-sigs
        repo: provider-aws-test-infra
        base_ref: main
        path_alias: sigs.k8s.io/provider-aws-test-infra
    spec:
      serviceAccountName: node-e2e-tests
      containers:
        - image: gcr.io/k8s-staging-test-infra/kubekins-e2e:v20231122-5f461e0995-master
          command:
            - runner.sh
          args:
            - bash
            - -c
            - |
              GOPROXY=direct go install sigs.k8s.io/provider-aws-test-infra/kubetest2-ec2@latest
              kubetest2 ec2 \
               --build \
               --instance-type=m6g.large  \
               --region us-east-1 \
               --target-build-arch linux/arm64 \
               --stage provider-aws-test-infra \
               --up \
               --down \
               --test=ginkgo \
               -- \
               --use-built-binaries true \
               --focus-regex='\[Conformance\]'
          env:
            - name: USE_DOCKERIZED_BUILD
              value: "true"
          # docker-in-docker needs privileged mode
          securityContext:
            privileged: true
          resources:
            limits:
              cpu: 8
              memory: 10Gi
            requests:
              cpu: 8
              memory: 10Gi
  kubernetes-sigs/provider-aws-test-infra:
  - name: pull-kubernetes-e2e-ec2-quick
    skip_branches:
      - release-\d+\.\d+  # per-release image
    annotations:
      testgrid-alert-stale-results-hours: "24"
      testgrid-create-test-group: "true"
      testgrid-num-failures-to-alert: "10"
      testgrid-dashboards: presubmits-ec2
    labels:
      preset-e2e-containerd-ec2: "true"
      preset-dind-enabled: "true"
    path_alias: sigs.k8s.io/provider-aws-test-infra
    always_run: true
    optional: false
    cluster: eks-prow-build-cluster
    decorate: true
    decoration_config:
      timeout: 4h
    spec:
      serviceAccountName: node-e2e-tests
      containers:
        - image: gcr.io/k8s-staging-test-infra/kubekins-e2e:v20231122-5f461e0995-master
          command:
            - runner.sh
          args:
            - bash
            - -c
            - |
              cd kubetest2-ec2 && GOPROXY=direct go install .
              VERSION=$(curl -Ls https://dl.k8s.io/ci/latest.txt)
              kubetest2 ec2 \
               --stage https://dl.k8s.io/ci/ \
               --version $VERSION \
               --up \
               --down \
               --test=ginkgo \
               -- \
               --parallel=30 \
              --focus-regex='Pods should be submitted and removed'
          env:
            - name: USE_DOCKERIZED_BUILD
              value: "true"
          # docker-in-docker needs privileged mode
          securityContext:
            privileged: true
          resources:
            limits:
              cpu: 8
              memory: 10Gi
            requests:
              cpu: 8
              memory: 10Gi
  - name: pull-kubernetes-e2e-ec2-cloud-provider-quick
    skip_branches:
      - release-\d+\.\d+  # per-release image
    annotations:
      testgrid-alert-stale-results-hours: "24"
      testgrid-create-test-group: "true"
      testgrid-num-failures-to-alert: "10"
      testgrid-dashboards: presubmits-ec2
    labels:
      preset-e2e-containerd-ec2: "true"
      preset-dind-enabled: "true"
    path_alias: sigs.k8s.io/provider-aws-test-infra
    always_run: true
    optional: true
    cluster: eks-prow-build-cluster
    decorate: true
    decoration_config:
      timeout: 4h
    spec:
      serviceAccountName: node-e2e-tests
      containers:
        - image: gcr.io/k8s-staging-test-infra/kubekins-e2e:v20231122-5f461e0995-master
          command:
            - runner.sh
          args:
            - bash
            - -c
            - |
              cd kubetest2-ec2 && GOPROXY=direct go install .
              VERSION=$(curl -Ls https://dl.k8s.io/ci/latest.txt)
              kubetest2 ec2 \
               --stage https://dl.k8s.io/ci/ \
               --external-cloud-provider true \
               --version $VERSION \
               --up \
               --down \
               --test=ginkgo \
               -- \
               --parallel=30 \
              --focus-regex='Pods should be submitted and removed'
          env:
            - name: USE_DOCKERIZED_BUILD
              value: "true"
          # docker-in-docker needs privileged mode
          securityContext:
            privileged: true
          resources:
            limits:
              cpu: 8
              memory: 10Gi
            requests:
              cpu: 8
              memory: 10Gi
  - name: pull-kubernetes-e2e-ec2-canary
    skip_branches:
      - release-\d+\.\d+  # per-release image
    annotations:
      testgrid-alert-stale-results-hours: "24"
      testgrid-create-test-group: "true"
      testgrid-num-failures-to-alert: "10"
      testgrid-dashboards: presubmits-ec2
    labels:
      preset-e2e-containerd-ec2: "true"
      preset-dind-enabled: "true"
    path_alias: sigs.k8s.io/provider-aws-test-infra
    always_run: true
    optional: false
    cluster: eks-prow-build-cluster
    decorate: true
    decoration_config:
      timeout: 4h
    extra_refs:
      - org: kubernetes
        repo: kubernetes
        base_ref: master
        path_alias: k8s.io/kubernetes
    spec:
      serviceAccountName: node-e2e-tests
      containers:
        - image: gcr.io/k8s-staging-test-infra/kubekins-e2e:v20231122-5f461e0995-master
          command:
            - runner.sh
          args:
            - bash
            - -c
            - |
              cd kubetest2-ec2 && GOPROXY=direct go install .
              kubetest2 ec2 \
               --build \
               --region us-east-1 \
               --target-build-arch linux/amd64 \
               --stage provider-aws-test-infra \
               --up \
               --down \
               --test=ginkgo \
               -- \
               --use-built-binaries true \
               --parallel=30 \
               --skip-regex='\[Driver:.gcepd\]|\[Slow\]|\[Serial\]|\[Disruptive\]|\[Flaky\]|\[Feature:.+\]'
          env:
            - name: USE_DOCKERIZED_BUILD
              value: "true"
          # docker-in-docker needs privileged mode
          securityContext:
            privileged: true
          resources:
            limits:
              cpu: 8
              memory: 10Gi
            requests:
              cpu: 8
              memory: 10Gi
  - name: pull-kubernetes-e2e-ec2-cloud-provider-canary
    skip_branches:
      - release-\d+\.\d+  # per-release image
    annotations:
      testgrid-alert-stale-results-hours: "24"
      testgrid-create-test-group: "true"
      testgrid-num-failures-to-alert: "10"
      testgrid-dashboards: presubmits-ec2
    labels:
      preset-e2e-containerd-ec2: "true"
      preset-dind-enabled: "true"
    path_alias: sigs.k8s.io/provider-aws-test-infra
    always_run: true
    optional: true
    cluster: eks-prow-build-cluster
    decorate: true
    decoration_config:
      timeout: 4h
    extra_refs:
      - org: kubernetes
        repo: kubernetes
        base_ref: master
        path_alias: k8s.io/kubernetes
    spec:
      serviceAccountName: node-e2e-tests
      containers:
        - image: gcr.io/k8s-staging-test-infra/kubekins-e2e:v20231122-5f461e0995-master
          command:
            - runner.sh
          args:
            - bash
            - -c
            - |
              cd kubetest2-ec2 && GOPROXY=direct go install .
              kubetest2 ec2 \
               --build \
               --region us-east-1 \
               --target-build-arch linux/amd64 \
               --stage provider-aws-test-infra \
               --external-cloud-provider true \
               --up \
               --down \
               --test=ginkgo \
               -- \
               --use-built-binaries true \
               --parallel=30 \
               --skip-regex='\[Driver:.gcepd\]|\[Slow\]|\[Serial\]|\[Disruptive\]|\[Flaky\]|\[Feature:.+\]'
          env:
            - name: USE_DOCKERIZED_BUILD
              value: "true"
          # docker-in-docker needs privileged mode
          securityContext:
            privileged: true
          resources:
            limits:
              cpu: 8
              memory: 10Gi
            requests:
              cpu: 8
              memory: 10Gi
  - name: pull-kubernetes-e2e-ec2-conformance-canary
    skip_branches:
      - release-\d+\.\d+  # per-release image
    annotations:
      testgrid-alert-stale-results-hours: "24"
      testgrid-create-test-group: "true"
      testgrid-num-failures-to-alert: "10"
      testgrid-dashboards: presubmits-ec2
    labels:
      preset-e2e-containerd-ec2: "true"
      preset-dind-enabled: "true"
    path_alias: sigs.k8s.io/provider-aws-test-infra
    always_run: true
    optional: false
    cluster: eks-prow-build-cluster
    decorate: true
    decoration_config:
      timeout: 4h
    extra_refs:
      - org: kubernetes
        repo: kubernetes
        base_ref: master
        path_alias: k8s.io/kubernetes
    spec:
      serviceAccountName: node-e2e-tests
      containers:
        - image: gcr.io/k8s-staging-test-infra/kubekins-e2e:v20231122-5f461e0995-master
          command:
            - runner.sh
          args:
            - bash
            - -c
            - |
              cd kubetest2-ec2 && GOPROXY=direct go install .
              kubetest2 ec2 \
               --build \
               --instance-type=m6a.large  \
               --region us-east-1 \
               --target-build-arch linux/amd64 \
               --stage provider-aws-test-infra \
               --up \
               --down \
               --test=ginkgo \
               -- \
               --use-built-binaries true \
               --focus-regex='\[Conformance\]'
          env:
            - name: USE_DOCKERIZED_BUILD
              value: "true"
          # docker-in-docker needs privileged mode
          securityContext:
            privileged: true
          resources:
            limits:
              cpu: 8
              memory: 10Gi
            requests:
              cpu: 8
              memory: 10Gi
  - name: pull-kubernetes-e2e-ec2-eks-conformance-canary
    skip_branches:
      - release-\d+\.\d+  # per-release image
    annotations:
      testgrid-alert-stale-results-hours: "24"
      testgrid-create-test-group: "true"
      testgrid-num-failures-to-alert: "10"
      testgrid-dashboards: presubmits-ec2
    labels:
      preset-e2e-containerd-ec2: "true"
      preset-dind-enabled: "true"
    path_alias: sigs.k8s.io/provider-aws-test-infra
    always_run: false
    optional: true
    cluster: eks-prow-build-cluster
    decorate: true
    decoration_config:
      timeout: 4h
    extra_refs:
      - org: kubernetes
        repo: kubernetes
        base_ref: master
        path_alias: k8s.io/kubernetes
    spec:
      serviceAccountName: node-e2e-tests
      containers:
        - image: gcr.io/k8s-staging-test-infra/kubekins-e2e:v20231122-5f461e0995-master
          command:
            - runner.sh
          args:
            - bash
            - -c
            - |
              cd kubetest2-ec2 && GOPROXY=direct go install .
              AMI_ID=$(aws ssm get-parameters --names \
                       /aws/service/eks/optimized-ami/1.28/amazon-linux-2/recommended/image_id \
                       --query 'Parameters[0].[Value]' --output text)
              kubetest2 ec2 \
               --build \
               --instance-type=m6a.large  \
               --region us-east-1 \
               --target-build-arch linux/amd64 \
               --worker-image "$AMI_ID" \
               --worker-user-data-file $(go env GOPATH)/src/sigs.k8s.io/provider-aws-test-infra/kubetest2-ec2/config/al2.sh \
               --stage provider-aws-test-infra \
               --up \
               --down \
               --test=ginkgo \
               -- \
               --use-built-binaries true \
               --focus-regex='\[Conformance\]'
          env:
            - name: USE_DOCKERIZED_BUILD
              value: "true"
          # docker-in-docker needs privileged mode
          securityContext:
            privileged: true
          resources:
            limits:
              cpu: 8
              memory: 10Gi
            requests:
              cpu: 8
              memory: 10Gi
  - name: pull-kubernetes-e2e-ec2-eks-al2023-conformance-canary
    skip_branches:
      - release-\d+\.\d+  # per-release image
    annotations:
      testgrid-alert-stale-results-hours: "24"
      testgrid-create-test-group: "true"
      testgrid-num-failures-to-alert: "10"
      testgrid-dashboards: presubmits-ec2
    labels:
      preset-e2e-containerd-ec2: "true"
      preset-dind-enabled: "true"
    path_alias: sigs.k8s.io/provider-aws-test-infra
    always_run: false
    optional: true
    cluster: eks-prow-build-cluster
    decorate: true
    decoration_config:
      timeout: 4h
    extra_refs:
      - org: kubernetes
        repo: kubernetes
        base_ref: master
        path_alias: k8s.io/kubernetes
    spec:
      serviceAccountName: node-e2e-tests
      containers:
        - image: gcr.io/k8s-staging-test-infra/kubekins-e2e:v20231122-5f461e0995-master
          command:
            - runner.sh
          args:
            - bash
            - -c
            - |
              set -x
              KUBE_MINOR_VERSION="v1.29"
              TODAYS_DATE=$(date -u +'%Y%m%d')
              AMI_NAME="amazon-eks-al2023-node-${KUBE_MINOR_VERSION}-v${TODAYS_DATE}"
              AMI_ID=$(aws ec2 describe-images --region=us-east-1 --filters "Name=name,Values=$AMI_NAME" --query 'Images[*].[ImageId]' --output text --max-items 1)

              if [ -z "$AMI_ID" ] ; then
                export AMI_NAME
                $(go env GOPATH)/src/sigs.k8s.io/provider-aws-test-infra/hack/build-ami.sh
                AMI_ID=$(aws ec2 describe-images --region=us-east-1 --filters "Name=name,Values=$AMI_NAME" --query 'Images[*].[ImageId]' --output text --max-items 1)
              else
                echo "found existing ami : $AMI_ID skipping building a new AMI..."
              fi

              cd kubetest2-ec2 && GOPROXY=direct go install .
              kubetest2 ec2 \
               --build \
               --instance-type=m6a.large  \
               --region us-east-1 \
               --target-build-arch linux/amd64 \
               --worker-image "$AMI_ID" \
               --worker-user-data-file $(go env GOPATH)/src/sigs.k8s.io/provider-aws-test-infra/kubetest2-ec2/config/al2023.sh \
               --stage provider-aws-test-infra \
               --up \
               --down \
               --test=ginkgo \
               -- \
               --use-built-binaries true \
               --focus-regex='\[Conformance\]'
          env:
            - name: BUILD_EKS_AMI_OS
              value: "al2023"
            - name: BUILD_EKS_AMI_ARCH
              value: "x86_64"
            - name: USE_DOCKERIZED_BUILD
              value: "true"
          # docker-in-docker needs privileged mode
          securityContext:
            privileged: true
          resources:
            limits:
              cpu: 8
              memory: 10Gi
            requests:
              cpu: 8
              memory: 10Gi
periodics:
- interval: 6h
  cluster: eks-prow-build-cluster
  name: ci-kubernetes-ec2-conformance-latest
  annotations:
    testgrid-dashboards: amazon-ec2, conformance-all, conformance-ec2, sig-release-master-informing
    testgrid-tab-name: Conformance - EC2 - master
    description: Runs conformance tests using kubetest against kubernetes master on EC2
  labels:
    preset-e2e-containerd-ec2: "true"
    preset-dind-enabled: "true"
  decorate: true
  decoration_config:
    timeout: 4h
  extra_refs:
    - org: kubernetes-sigs
      repo: provider-aws-test-infra
      base_ref: main
      path_alias: sigs.k8s.io/provider-aws-test-infra
    - org: kubernetes
      repo: kubernetes
      base_ref: master
      path_alias: k8s.io/kubernetes
      workdir: true
  spec:
    serviceAccountName: node-e2e-tests
    containers:
      - image: gcr.io/k8s-staging-test-infra/kubekins-e2e:v20231122-5f461e0995-master
        command:
          - runner.sh
        args:
          - bash
          - -c
          - |
            GOPROXY=direct go install sigs.k8s.io/provider-aws-test-infra/kubetest2-ec2@latest
            kubetest2 ec2 \
             --build \
             --target-build-arch linux/amd64 \
             --stage provider-aws-test-infra \
             --up \
             --down \
             --test=ginkgo \
             -- \
             --use-built-binaries true \
             --focus-regex='\[Conformance\]'
        env:
          - name: USE_DOCKERIZED_BUILD
            value: "true"
        # docker-in-docker needs privileged mode
        securityContext:
          privileged: true
        resources:
          limits:
            cpu: 8
            memory: 10Gi
          requests:
            cpu: 8
            memory: 10Gi
- interval: 6h
  cluster: eks-prow-build-cluster
  name: ci-kubernetes-ec2-eks-conformance-latest
  annotations:
    testgrid-dashboards: amazon-ec2, conformance-ec2
    testgrid-tab-name: Conformance - EC2/EKS - master
    description: Runs conformance tests using kubetest against kubernetes master on EC2 using EKS worker nodes
  labels:
    preset-e2e-containerd-ec2: "true"
    preset-dind-enabled: "true"
  decorate: true
  decoration_config:
    timeout: 4h
  extra_refs:
    - org: kubernetes-sigs
      repo: provider-aws-test-infra
      base_ref: main
      path_alias: sigs.k8s.io/provider-aws-test-infra
    - org: kubernetes
      repo: kubernetes
      base_ref: master
      path_alias: k8s.io/kubernetes
      workdir: true
  spec:
    serviceAccountName: node-e2e-tests
    containers:
      - image: gcr.io/k8s-staging-test-infra/kubekins-e2e:v20231122-5f461e0995-master
        command:
          - runner.sh
        args:
          - bash
          - -c
          - |
            GOPROXY=direct go install sigs.k8s.io/provider-aws-test-infra/kubetest2-ec2@latest
            AMI_ID=$(aws ssm get-parameters --names \
                     /aws/service/eks/optimized-ami/1.28/amazon-linux-2/recommended/image_id \
                     --query 'Parameters[0].[Value]' --output text)
            kubetest2 ec2 \
             --build \
             --target-build-arch linux/amd64 \
             --worker-image "$AMI_ID" \
             --worker-user-data-file $(go env GOPATH)/src/sigs.k8s.io/provider-aws-test-infra/kubetest2-ec2/config/al2.sh \
             --stage provider-aws-test-infra \
             --up \
             --down \
             --test=ginkgo \
             -- \
             --use-built-binaries true \
             --focus-regex='\[Conformance\]'
        env:
          - name: USE_DOCKERIZED_BUILD
            value: "true"
        # docker-in-docker needs privileged mode
        securityContext:
          privileged: true
        resources:
          limits:
            cpu: 8
            memory: 10Gi
          requests:
            cpu: 8
            memory: 10Gi
- interval: 6h
  cluster: eks-prow-build-cluster
  name: ci-kubernetes-ec2-eks-al2023-conformance-latest
  annotations:
    testgrid-dashboards: amazon-ec2, conformance-ec2
    testgrid-tab-name: Conformance - EC2/EKS/AL2023 - master
    description: Runs conformance tests using kubetest against kubernetes master on EC2 using EKS worker nodes
  labels:
    preset-e2e-containerd-ec2: "true"
    preset-dind-enabled: "true"
  decorate: true
  decoration_config:
    timeout: 4h
  extra_refs:
    - org: kubernetes-sigs
      repo: provider-aws-test-infra
      base_ref: main
      path_alias: sigs.k8s.io/provider-aws-test-infra
    - org: kubernetes
      repo: kubernetes
      base_ref: master
      path_alias: k8s.io/kubernetes
      workdir: true
  spec:
    serviceAccountName: node-e2e-tests
    containers:
      - image: gcr.io/k8s-staging-test-infra/kubekins-e2e:v20231122-5f461e0995-master
        command:
          - runner.sh
        args:
          - bash
          - -c
          - |
            set -x
            KUBE_MINOR_VERSION="v1.29"
            TODAYS_DATE=$(date -u +'%Y%m%d')
            AMI_NAME="amazon-eks-al2023-node-${KUBE_MINOR_VERSION}-v${TODAYS_DATE}"
            AMI_ID=$(aws ec2 describe-images --region=us-east-1 --filters "Name=name,Values=$AMI_NAME" --query 'Images[*].[ImageId]' --output text --max-items 1)

            if [ -z "$AMI_ID" ] ; then
              export AMI_NAME
              $(go env GOPATH)/src/sigs.k8s.io/provider-aws-test-infra/hack/build-ami.sh
              AMI_ID=$(aws ec2 describe-images --region=us-east-1 --filters "Name=name,Values=$AMI_NAME" --query 'Images[*].[ImageId]' --output text --max-items 1)
            else
              echo "found existing ami : $AMI_ID skipping building a new AMI..."
            fi

            GOPROXY=direct go install sigs.k8s.io/provider-aws-test-infra/kubetest2-ec2@latest
            kubetest2 ec2 \
             --build \
             --target-build-arch linux/amd64 \
             --worker-image "$AMI_ID" \
             --worker-user-data-file $(go env GOPATH)/src/sigs.k8s.io/provider-aws-test-infra/kubetest2-ec2/config/al2023.sh \
             --stage provider-aws-test-infra \
             --up \
             --down \
             --test=ginkgo \
             -- \
             --use-built-binaries true \
             --focus-regex='\[Conformance\]'
        env:
          - name: BUILD_EKS_AMI_OS
            value: "al2023"
          - name: BUILD_EKS_AMI_ARCH
            value: "x86_64"
          - name: USE_DOCKERIZED_BUILD
            value: "true"
        # docker-in-docker needs privileged mode
        securityContext:
          privileged: true
        resources:
          limits:
            cpu: 8
            memory: 10Gi
          requests:
            cpu: 8
            memory: 10Gi
- interval: 6h
  cluster: eks-prow-build-cluster
  name: ci-kubernetes-ec2-arm64-conformance-latest
  annotations:
    testgrid-dashboards: amazon-ec2, conformance-all, conformance-ec2, sig-release-master-informing
    testgrid-tab-name: Conformance - EC2 - arm64 - master
    description: Runs conformance tests using kubetest against kubernetes master on EC2 (arm64)
  labels:
    preset-e2e-containerd-ec2: "true"
    preset-dind-enabled: "true"
  decorate: true
  decoration_config:
    timeout: 4h
  extra_refs:
    - org: kubernetes-sigs
      repo: provider-aws-test-infra
      base_ref: main
      path_alias: sigs.k8s.io/provider-aws-test-infra
    - org: kubernetes
      repo: kubernetes
      base_ref: master
      path_alias: k8s.io/kubernetes
      workdir: true
  spec:
    serviceAccountName: node-e2e-tests
    containers:
      - image: gcr.io/k8s-staging-test-infra/kubekins-e2e:v20231122-5f461e0995-master
        command:
          - runner.sh
        args:
          - bash
          - -c
          - |
            GOPROXY=direct go install sigs.k8s.io/provider-aws-test-infra/kubetest2-ec2@latest
            kubetest2 ec2 \
             --build \
             --target-build-arch linux/arm64 \
             --stage provider-aws-test-infra \
             --up \
             --down \
             --test=ginkgo \
             -- \
             --use-built-binaries true \
             --focus-regex='\[Conformance\]'
        env:
          - name: USE_DOCKERIZED_BUILD
            value: "true"
        # docker-in-docker needs privileged mode
        securityContext:
          privileged: true
        resources:
          limits:
            cpu: 8
            memory: 10Gi
          requests:
            cpu: 8
            memory: 10Gi
- interval: 6h
  cluster: eks-prow-build-cluster
  name: ci-kubernetes-e2e-ubuntu-ec2-containerd
  annotations:
    testgrid-dashboards: amazon-ec2
    testgrid-tab-name: ec2-ubuntu-master-containerd
    description: Uses kubetest to run e2e tests (-Slow|Serial|Disruptive|Flaky|Feature) against a cluster (ubuntu based and uses containerd) created with kubetest2-ec2
  labels:
    preset-e2e-containerd-ec2: "true"
    preset-dind-enabled: "true"
  decorate: true
  decoration_config:
    timeout: 4h
  extra_refs:
    - org: kubernetes-sigs
      repo: provider-aws-test-infra
      base_ref: main
      path_alias: sigs.k8s.io/provider-aws-test-infra
    - org: kubernetes
      repo: kubernetes
      base_ref: master
      path_alias: k8s.io/kubernetes
      workdir: true
  spec:
    serviceAccountName: node-e2e-tests
    containers:
      - image: gcr.io/k8s-staging-test-infra/kubekins-e2e:v20231122-5f461e0995-master
        command:
          - runner.sh
        args:
          - bash
          - -c
          - |
            GOPROXY=direct go install sigs.k8s.io/provider-aws-test-infra/kubetest2-ec2@latest
            kubetest2 ec2 \
             --build \
             --target-build-arch linux/amd64 \
             --stage provider-aws-test-infra \
             --up \
             --down \
             --test=ginkgo \
             -- \
             --use-built-binaries true \
             --parallel=30 \
             --skip-regex='\[Driver:.gcepd\]|\[Slow\]|\[Serial\]|\[Disruptive\]|\[Flaky\]|\[Feature:.+\]'
        env:
          - name: USE_DOCKERIZED_BUILD
            value: "true"
        # docker-in-docker needs privileged mode
        securityContext:
          privileged: true
        resources:
          limits:
            cpu: 8
            memory: 10Gi
          requests:
            cpu: 8
            memory: 10Gi
- interval: 6h
  cluster: eks-prow-build-cluster
  name: ci-kubernetes-e2e-ubuntu-ec2-arm64-containerd
  annotations:
    testgrid-dashboards: amazon-ec2
    testgrid-tab-name: ec2-arm64-ubuntu-master-containerd
    description: Uses kubetest to run e2e tests (-Slow|Serial|Disruptive|Flaky|Feature) against a cluster (ubuntu based and uses containerd) created with kubetest2-ec2
  labels:
    preset-e2e-containerd-ec2: "true"
    preset-dind-enabled: "true"
  decorate: true
  decoration_config:
    timeout: 4h
  extra_refs:
    - org: kubernetes-sigs
      repo: provider-aws-test-infra
      base_ref: main
      path_alias: sigs.k8s.io/provider-aws-test-infra
    - org: kubernetes
      repo: kubernetes
      base_ref: master
      path_alias: k8s.io/kubernetes
      workdir: true
  spec:
    serviceAccountName: node-e2e-tests
    containers:
      - image: gcr.io/k8s-staging-test-infra/kubekins-e2e:v20231122-5f461e0995-master
        command:
          - runner.sh
        args:
          - bash
          - -c
          - |
            GOPROXY=direct go install sigs.k8s.io/provider-aws-test-infra/kubetest2-ec2@latest
            kubetest2 ec2 \
             --build \
             --target-build-arch linux/arm64 \
             --stage provider-aws-test-infra \
             --up \
             --down \
             --test=ginkgo \
             -- \
             --use-built-binaries true \
             --parallel=30 \
             --test-args='--node-os-arch=arm64' \
             --skip-regex='\[Driver:.gcepd\]|\[Slow\]|\[Serial\]|\[Disruptive\]|\[Flaky\]|\[Feature:.+\]'
        env:
          - name: USE_DOCKERIZED_BUILD
            value: "true"
        # docker-in-docker needs privileged mode
        securityContext:
          privileged: true
        resources:
          limits:
            cpu: 8
            memory: 10Gi
          requests:
            cpu: 8
            memory: 10Gi
- interval: 12h
  cluster: eks-prow-build-cluster
  name: ci-aws-ec2-janitor
  annotations:
    testgrid-dashboards: amazon-ec2
    testgrid-tab-name: aws-ec2-janitor
    description: cleanup any EC2 instances older than 2 days
  labels:
    preset-e2e-containerd-ec2: "true"
  decorate: true
  decoration_config:
    timeout: 4h
  spec:
    serviceAccountName: node-e2e-tests
    containers:
      - image: gcr.io/k8s-staging-test-infra/kubekins-e2e:v20231122-5f461e0995-master
        command:
          - runner.sh
        args:
          - bash
          - -c
          - |
            set -xeu
            target=$(date -d "2 days ago" +%Y-%m-%d)
            region="us-east-1"
            # Is the Launch time *before* two days ago? if so then terminate the instance.
            for id in `aws ec2 describe-instances --query "Reservations[].Instances[?LaunchTime<='$target'][].{id: InstanceId}" --filters "Name=instance-state-name,Values=running" --output text`
            do
              aws ec2 --region us-east-1 terminate-instances --instance-ids $id
            done
        resources:
          limits:
            cpu: 2
            memory: 4Gi
          requests:
            cpu: 2
            memory: 4Gi
